

                                                     INSPECTORLOG
                                                 Copyright (C) 2013-2017 
                                            Antonio Morales Maldonado (v1.0)
                                             Jesús E. Díaz Verdejo (v2.0)

                                                Version 3.0 - 19/12/2017

                                                    README - English
------------------------------------------------------------------------------------------------------------------------------------------
CHANGELOG v3.1
- Optimized URI decoding to improve performance against multiple encoding type% 25 (e.g.% 25252525)

CHANGELOG v3.0
- Modifications for speed optimization (definitions of variables)
- Regular expressions associated with the rules are compiled and initialized when loading the rule, not when applying it (modified rules structure, release of pcre expressions at the end)
- The http_method key is recognized to remove the content associated with a method. There is no distinction between methods for applying the rules (TODO) and they are considered valid methods GET, POST, HEAD, PROPINFO


CHANGELOG v2.0.2
- Modified to allow incomplete or badly formatted lines in the log (not processed)
- Fixed error in parser of log (IP management)
- Fixed memory management error with pcre field modifiers
- Fixed filtered output in uri format to include the number of uris in the first line
- Added support for rules in meerkat format (uricontent)
- Added coverage% encoding up to% ff (SOME THAT DO NOT HAVE ASCII REPRESENTATION ARE NOT INCLUDED)
- Added coverage for% encoding with UTF8 for the most common Spanish characters. For some strange reason, strcasestr does not work with UTF encoding and upper and lower case versions have been hand coded.
- Added support for denials in content and pcre.
- Added option to suppress decoding warning messages% encoding

CHANGELOG v2.0.1
- Added support for multiple pcre

CHANGELOG v2.0 (Jesús Díaz Verdejo)

- Files have been reorganized to reduce their number and global parameters and functions.
- Added ability to process different formats of trace files.
- Coding managemen t% (urlencode/urldecode) has been added. Now the uri are processed before and after decoding iteratively (to detect multiple encoding).
- The "urilen" and "dsize" fields of the rules are managed.
- The filtered trace file (optional) is proportional to the output.
- The "nocase" field is managed at the level of individual content in the rule (content and pcre).
- You can globally activate "nocase" to ignore upper/lower case.
- The output is modified to be compatible with previous tools (u2uri) and provide the list of alerts (sid) associated with each uri.
- Extended output is added: information about the message and sid of each alert.
- The functionality associated with MySQL has not been modified (which has not been verified in this version).
- Added information about events/exceptions during the processing of the rule files to improve the tracking of the processed rules.
- Information about the correspondence between alert and line of the trace file has been added to make it possible to match it later.
- The ability to detect rules relating to http servers (configurable port numbers and acting as a server) has been improved.
- Alerts are sorted by sid on the output.


COMPILATION

- REQUIREMENTS

- A linux system is required to compile and run the program. In principle, any Linux distribution is compatible.
- The pcre-dev, mysqlclient and mysqlclientdev libraries are required. For more information, see the "pcre installation" and "mysql installation" sections below.

- INSTALATION

- To compile the program, execute "make" in the src directory.
- By default, it is installed in the src directory.
- In the mysql directory the macro is provided to create the necessary database (if applicable)

-----------------------------------------------

DESCRIPTION

- The program analyzes trace files containing URIs in different formats and applies the rules contained in the files in the rules directory, informing about the associated alerts.

FORMAT:
    inspectorlog -l logFile [-t <list|apache|wellness|uri>] [-r ruleDir] [--user=<MySQL User>] [--pass=<MySQL Pass>] [--schema=<MySQL Schema>] [-o <salida log limpio>] [-n (nocase)] [-e (extended_alerts)]

    -l logFile					Trace file to process
    -t <list|apache|wellness|uri>	Trace file format. By default, apache is used. See examples of formats below.
    -r ruleDir					Directory with Snort rules. ALL files in the directory are processed. By default, ./rules is used
    --user=<MySQL User>			User to access the MySQL database with alerts (if applicable)
    --pass=<MySQL Pass>			Password for access to the database
    --schema=<MySQL Schema>			Table to use
    -o <clean log output>			File with the trace elements that have not generated alerts (filtering). The format will be the same as the input
    -n						Apply the rules ignoring upper and lower case in all cases. Otherwise, the rule will be used according to the existing "nocase" tag or the corresponding regular expression switch.
    -e						Activate extended alert information (alert message and sid included). Otherwise only the sid is indicated
    -w						Generate warnings when %encoded characters cannot be decoded
    
FORMATS OF TRACES:
     The formats currently available for the trace file are:
     - list List of URIs without method or additional fields
     - apache Standard format of apache
     - wellness Format provided for wellnes traces
     - uri Format used by the uri files of the ssmv4 tool. The first line contains the number of uris. Each line includes the length and uri
   
Examples:
    / * Field mapping (depending on type) * /
    / * WELLNESS TYPE (10 fields)
    2017-06-22T06:25:15.356441+02:00 A-SQU-BAL-HAP03 haproxy[5518]: 10.128.2.64:46469 {www.wtelecom.es} "GET / HTTP/1.1" main_http_frontend WT_www_be/A-WTE-INF-WEB03
    TIMESTAMP NODE PLACE IP:PORT {server} "METHOD URI VER" CODE1 CODE2
    */
    
    / * APACHE TYPE (12 fields)
    172.16.16.210 - - [02/May/2017:12:21:07 +0200]  "GET http://127.0.0.1/finger HTTP/1.1" 404 289 "-" "Wget/1.17.1 (linux-gnu)"  
    37.152.139.155 - - [07/Nov/2013:17:00:31 -0800] "GET /2003/padron.html HTTP/1.1" 200 11800 "-" "Java/1.7.0_15" "ajedreznd.com"
    IP USERIDENTIFIER USERID [TIMESTAMP DIF] "METHOD URI PROTOCOL" CODE1 CODE2 "-" "REFERER"

    TIPO LIST (URI en el primer campo)
    TIPO URI (URI en el segundo campo (y 1a linea con numero de uris)
    */   

RULES FILES
    The rules are processed in the standard Snort format (VRT).
    Only the following fields are considered for the application of the rule:
    - content		All content fields found up to a maximum of MAX_PATTERNS are included
    - pcre			Only a pcre field is considered. This is a limitation of the current version of the tool.
    - dsize		Payload sizes and their meaning (major, minor, equal) are considered, although they are applied to the URI field
    - urilen		Same as dsize. In fact, they are processed as a single field
    - nocase		Applies to the field immediately before
    
    The fields that are stored are:
    - msg			Rule description
    - reference		References of the rule (there may be several with an upper limit)
    - classtype		Rule's classtype field
    - sid			SID of the rule
    
    The remaining fields are ignored.
    
    IMPORTANT!! All files that are in the "rules" directory or in any of its subdirectories must belong to rules files.
    In case of decompressing the Snort rule files directly in that directory or in any of its directories, it is important that those files that do not correspond to Snort rules (such as "disclaimer" or license files) are deleted. Otherwise the behavior may be unexpected.    

    
Limitations in relation to the rules:
    --------------------------------------
    
    Obviously, the criteria related to the flows (flowbits, flow) cannot be considered, so many false positives can be produced, especially in the case of very generic rules at the content or pcre level. This limitation is insurmountable.
    
    The fields that determine the positions (depth, distance, etc.) are not considered in the current version of the tool. This can also lead to false positives. This limitation could be alleviated in successive versions of the tool by using regular expressions to concatenate the expressions (distance) or apply the rule from uri (depth) positions.
    
    (SOLVED v2.0.1) Only a parent field is considered in this version. There are some VRT rules with more than one pcre field. This limitation could easily be avoided by increasing the number of fields (EVERYTHING).
    
    (SOLVED v2.0.2) Denial is not properly managed in the fields to be searched in the rules. Denied fields are extracted and identified, but not applied correctly. This must be corrected (TODO / BUG).
    
    Cases of incorrect application of rules with pcre expressions that involve repetition have been identified. No solution found yet (BUG).
    
    The method used is not checked. False positives are generated because the method does not correspond. It could be managed in some trace formats, not in others (ALL).
    
    Problems in rules containing %00 (BUG) have been identified.


OUTPUT FORMAT:

     The output is done by screen and includes two sections:
     - Initial information on the loaded rules and their processing.
     - Trace analysis result:
	   Packet [<number_line_in_log>]\tUri [<uri_analyzed>]\tNattacks [<num_generated_alerts>]\t [<alert_info_1>]\t ... \t [<alert_info_n>]    
    
	alert_info_n can only be the sid (normal output) or the description of the alert and the sid separated by '-' (extended output)

	Example:
    
            ------------------------- Initializing Rules ---------------------
            Rules directory : "/media/sf_work/siva/tools/InspectorLogv2.0/rules-kk"
                Opening ../rules-kk/http_kk.rules... done
                Reglas: leídas [1], erróneas [0], URI [1]
            --------------------------- Statistics ------------------------------
            Read [1] rules, [1] http-related, [0] with errors
            --------------------------- Analysis results -----------------------------
            #Alertas y firmas generadas: ./inspectorlog -l ../kk.txt -r ../rules-kk
            Packet [1]	Uri [127.0.0.1/cgi-bin/phf?Qname=%0Acat%20/etc/passwd]	Nattacks [3]	Signatures	[886]	[1122]	[1147]
            Packet [2]	Uri [127.0.0.1/cgi-bin/phf?Qname=%0Acd%20/%0als]	Nattacks [1]	Signatures	[886]
            # N. paquetes [2], [0] con alertas, N. Alertas [0]
            Execution time: 0.006367 s

            -------------------------------------------------------------------------------
    
TESTS AND EXAMPLES:

- In the "access.log" file located in the 'tests' directory, an example of a large log (+ 15000 entries) is provided to test the
  program operation This file contains several threats that involve different rules from different files of different rules,
  demonstrating the detection of both patterns and regular expressions.

- To test this file, execute the following command from the main directory:
	./inspectorlog -l Tests / access.log

- By default the rules files must be in the "rules" folder, but can be changed by passing the option "--rules [dir]" as arguments
  to the program 2 rule directories 'rules' and 'rules2' are included, which contain the Snort VRT rules and a custom rule set respectively.

- Other test files used for the different measurements made are also included.
  
- In order to obtain a detailed analysis of the output information through Snort Report, it is necessary to have a MySQL server installed in
  local, as well as with a web server capable of interpreting PHP. You can get Snort Report from the creators website:
   http://www.symmetrixtech.com/download.html

- For more information about the input parameters use the "--help" argument.

-----------------------------------------------------------------------------

PCRE INSTALLATION

- On debian and derivative systems, simply execute the following command from the console (administrator permissions are required):
	[sudo] apt-get update
	[sudo] apt-get install libpcre3 libpcre3-dev

- For other distributions go to the website of the library (http://www.pcre.org/) and follow the installation steps.

------------------------------------------------------------------------------
MYSQL INSTALLATION

- On debian and derivative systems, execute the following commands from the console (administrator permissions are required):
	[sudo] apt-get update
	[sudo] apt-get install libmysqlclient libmysqlclient-dev

- For other distributions download and compile the connector for C from the address: http://dev.mysql.com/downloads/connector/c/
